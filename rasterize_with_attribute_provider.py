# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Rasterize_with_attribute
                                 A QGIS plugin
 This plugin is an alternative to the GDAL "Rasterize (overwrite with attribute)" tool, available from the ToolBox, with the advantage of creating a new temporary raster for the result, unlike the original tool that modifies the input raster without previously creating a copy of it.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-26
        copyright            : (C) 2025 by Antonio Sobral Almeida
        email                : 66124.almeida@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Antonio Sobral Almeida'
__date__ = '2025-07-26'
__copyright__ = '(C) 2025 by Antonio Sobral Almeida'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import QgsProcessingProvider
from qgis.core import QgsProcessingModelAlgorithm
import os
from .rasterize_with_attribute_algorithm import Rasterize_with_attributeAlgorithm


class Rasterize_with_attributeProvider(QgsProcessingProvider):

    def __init__(self):
        """
        Default constructor.
        """
        QgsProcessingProvider.__init__(self)

    def unload(self):
        """
        Unloads the provider. Any tear-down steps required by the provider
        should be implemented here.
        """
        pass

    def loadAlgorithms(self):
        """
        Loads all algorithms belonging to this provider.
        """
        # self.addAlgorithm(Rasterize_with_attributeAlgorithm())
        # add additional algorithms here
        # self.addAlgorithm(MyOtherAlgorithm())
        for dirpath, dirnames, files in os.walk(os.path.dirname(__file__)):
            for file_name in files:
                if file_name.lower().endswith('.model3'):
                    alg = QgsProcessingModelAlgorithm()
                    alg.fromFile(os.path.join(dirpath, file_name))
                    self.addAlgorithm(alg)

    def id(self):
        """
        Returns the unique provider id, used for identifying the provider. This
        string should be a unique, short, character only string, eg "qgis" or
        "gdal". This string should not be localised.
        """
        return 'Rasterize providers'

    def name(self):
        """
        Returns the provider name, which is used to describe the provider
        within the GUI.

        This string should be short (e.g. "Lastools") and localised.
        """
        return self.tr('Rasterize plugin')

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        return QgsProcessingProvider.icon(self)

    def longName(self):
        """
        Returns the a longer version of the provider name, which can include
        extra details such as version numbers. E.g. "Lastools LIDAR tools
        (version 2.2.1)". This string should be localised. The default
        implementation returns the same string as name().
        """
        return self.name()
