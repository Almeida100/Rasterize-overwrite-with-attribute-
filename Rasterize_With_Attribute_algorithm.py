# -*- coding: utf-8 -*-

"""
/***************************************************************************
 RasterizeWithAttribute
                                 A QGIS plugin
 This plugin is an alternative to the GDAL "Rasterize (overwrite with attribute)" tool, available from the ToolBox, with the advantage of creating a new temporary raster for the result, unlike the original tool that modifies the input raster without previously creating a copy of it.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-29
        copyright            : (C) 2025 by Antonio Sobral Almeida
        email                : 66124.almeida@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Antonio Sobral Almeida'
__date__ = '2025-07-29'
__copyright__ = '(C) 2025 by Antonio Sobral Almeida'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink)

from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterRasterLayer
from qgis.core import QgsProcessingParameterVectorLayer
from qgis.core import QgsProcessingParameterField
from qgis.core import QgsProcessingParameterRasterDestination
from qgis.core import QgsVectorDataProvider
from qgis.core import QgsProcessingContext
from qgis.core import QgsProcessingUtils
from qgis.core import QgsRasterBandStats
from qgis.core import QgsSingleBandGrayRenderer
from qgis.core import QgsContrastEnhancement
import processing
from qgis.core import (
    QgsApplication,
    QgsProject,
)


class RasterizeWithAttributeAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )


class RasterizeWithAttributeAlgorithm(QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterRasterLayer('input_raster_layer', 'Input raster layer', defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('input_vector_layer', 'Input vector layer', defaultValue=None))
        self.addParameter(QgsProcessingParameterField('field_with_values_to_overwrite_raster_values', 'Field with values to overwrite raster values', type=QgsProcessingParameterField.Numeric, parentLayerParameterName='input_vector_layer', allowMultiple=False, defaultValue=None))
        self.addParameter(QgsProcessingParameterRasterDestination('Rasterized', 'Rasterized', createByDefault=True, defaultValue=''))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(2, model_feedback)
        results = {}
        outputs = {}

        # Translate (convert format)
        alg_params = {
            'COPY_SUBDATASETS': False,
            'DATA_TYPE': 6,  # Float32
            'EXTRA': None,
            'INPUT': parameters['input_raster_layer'],
            'NODATA': None,
            'OPTIONS': None,
            'TARGET_CRS': None,
            'OUTPUT': parameters['Rasterized']
        }
        outputs['TranslateConvertFormat'] = processing.run('gdal:translate', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['Rasterized'] = outputs['TranslateConvertFormat']['OUTPUT']

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # Rasterize (overwrite with attribute)
        alg_params = {
            'ADD': False,
            'EXTRA': None,
            'FIELD': parameters['field_with_values_to_overwrite_raster_values'],
            'INPUT': parameters['input_vector_layer'],
            'INPUT_RASTER': outputs['TranslateConvertFormat']['OUTPUT']
        }
        outputs['RasterizeOverwriteWithAttribute'] = processing.run('gdal:rasterize_over', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        
        # Get te result raster (object) 
        rl = outputs['TranslateConvertFormat']['OUTPUT']
        capa = QgsProcessingUtils.mapLayerFromString(rl, context)
        provider=capa.dataProvider()

        stats = provider.bandStatistics(1, QgsRasterBandStats.All)
        min = stats.minimumValue
        max = stats.maximumValue

        renderer=capa.renderer() #current renderer
        myType = renderer.dataType(1)
        myEnhancement = QgsContrastEnhancement(myType)

        GrayRenderer = QgsSingleBandGrayRenderer(provider,1) #create a new renderer
        contrast_enhancement = QgsContrastEnhancement.StretchToMinimumMaximum
        myEnhancement.setContrastEnhancementAlgorithm(contrast_enhancement,True)
        myEnhancement.setMinimumValue(min)   #Set the minimum value you want
        myEnhancement.setMaximumValue(max)   #Put the maximum value you want 

        capa.setRenderer(GrayRenderer)
        capa.renderer().setContrastEnhancement(myEnhancement)
        capa.triggerRepaint()


 
        return results

    def name(self):
        return 'Rasterize'

    def displayName(self):
        return 'Rasterize with attribute'

    def group(self):
        return None

    def groupId(self):
        return None

    def createInstance(self):
        return RasterizeWithAttributeAlgorithm()
